package LinkedList;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Test;

class DListTest {
	@Test
	public void testConstructor() {
		DList<Integer> b = new DList<>();
		assertEquals("[]", b.toString());
		assertEquals("[]", b.toStringR());
		assertEquals(0, b.size());
	}

	@Test
	public void testPrepend() {
		DList<String> l = new DList<>();
		l.prepend("Sampson");
		assertEquals("[Sampson]", l.toString());
		assertEquals("[Sampson]", l.toStringR());
		assertEquals(1, l.size());

		l.prepend("EquityBank");
		// assertEquals("Sampson", l.last().value());
		// assertEquals("EquityBank", l.first().value());
		assertEquals("[EquityBank, Sampson]", l.toString());
		assertEquals("[Sampson, EquityBank]", l.toStringR());
		assertEquals(2, l.size());

	}

	@Test
	public void testAppend() {
		DList<String> m = new DList<>();
		m.append("Sampson");
		assertEquals("[Sampson]", m.toString());
		assertEquals("[Sampson]", m.toStringR());
		assertEquals(1, m.size());

		m.append("EquityBank");
		// assertEquals("EquityBank", m.last().value());

	}

	@Test
	public void testGetNode() {
		DList<String> n = new DList<>();
		n.append("Mumbai");
		n.prepend("Nairobi");
		n.append("Washington");
		n.prepend("Accra");
		n.append("Cranckfergus");
		assertEquals(5, n.size());
		assertEquals("Accra", n.getNode(3).value());
		assertEquals("Nairobi", n.getNode(1).value());
		assertEquals("Mumbai", n.getNode(0).value());
		assertEquals("Washington", n.getNode(2).value());
		assertEquals("Cranckfergus", n.getNode(4).value());

		assertThrows(AssertionError.class, () -> {
			n.getNode(-5);
		});
	}
}

//package LinkedList;
//
//import static org.junit.jupiter.api.Assertions.*;
//
//import org.junit.jupiter.api.Test;
//
//class DLListTest {
//
//	@Test
//	public void testConstructor() {
//		DLList<Integer> b= new DLList<Integer>();
//		assertEquals("[]", b.toString());
//		assertEquals("[]", b.gnirtSot());
//		assertEquals(0, b.size());
//	}
//
//
//	@Test
//	public void testPrepend() {
//		DLList<String> l= new DLList<String>();
//		l.prepend("Sampson");
//		assertEquals("[Sampson]", l.toString());
//		assertEquals("[Sampson]", l.gnirtSot());
//		assertEquals(1, l.size());
//
//		l.prepend("EquityBank");
//		assertEquals("Sampson", l.last().value());
//		assertEquals("EquityBank", l.first().value());
//		assertEquals("[EquityBank, Sampson]", l.toString());
//		assertEquals("[Sampson, EquityBank]", l.gnirtSot());
//		assertEquals(2, l.size());
//
//		l.prepend("AmazonInc");
//		assertEquals("[AmazonInc, EquityBank, Sampson]", l.toString());
//		assertEquals("[Sampson, EquityBank, AmazonInc]", l.gnirtSot());
//		assertEquals(3, l.size());
//		assertEquals("Sampson", l.last().value());
//		assertEquals("AmazonInc", l.first().value());
//	}
//
//	@Test
//	public void testAppend() {
//		DLList<String> m= new DLList<String>();
//		m.append("Sampson");
//		assertEquals("[Sampson]", m.toString());
//		assertEquals("[Sampson]", m.gnirtSot());
//		assertEquals(1, m.size());
//
//		m.append("EquityBank");
//		assertEquals("EquityBank", m.last().value());
//		assertEquals("Sampson", m.first().value());
//		assertEquals("[EquityBank, Sampson]", m.gnirtSot());
//		assertEquals("[Sampson, EquityBank]", m.toString());
//		assertEquals(2, m.size());
//
//		m.append("AmazonInc");
//		assertEquals("[AmazonInc, EquityBank, Sampson]", m.gnirtSot());
//		assertEquals("[Sampson, EquityBank, AmazonInc]",m.toString());
//		assertEquals(3, m.size());
//		assertEquals("AmazonInc", m.last().value());
//		assertEquals("Sampson", m.first().value());
//	}
//
//	@Test
//	public void testGetter() {
//		DLList<String> n= new DLList<String>();
//		n.append("Mumbai");
//		n.prepend("Nairobi");
//		n.append("Washington");
//		n.prepend("Accra");
//		n.append("Cranckfergus");
//		assertEquals(5, n.size());
//		assertEquals("Accra", n.getNode(0).value());
//		assertEquals("Nairobi", n.getNode(1).value());
//		assertEquals("Mumbai", n.getNode(2).value());
//		assertEquals("Washington", n.getNode(3).value());
//		assertEquals("Cranckfergus", n.getNode(4).value());
//
//		assertThrows(AssertionError.class,() ->{ n.getNode(-5);});
//	}
//	@Test
//	public void Testdelete() {
//		DLList<String> o= new DLList<String>();
//		o.append("Mumbai");
//		o.prepend("Nairobi");
//		o.append("Washington");
//		o.prepend("Accra");
//		o.append("Cranckfergus");
//		assertEquals(5, o.size());
//		assertEquals("Mumbai", o.getNode(2).value());
//
//		o.delete(o.getNode(2));
//		assertEquals(4, o.size());
//
//		assertEquals("Accra", o.getNode(0).value());
//		assertEquals("Nairobi", o.getNode(1).value());
//		assertEquals("Washington", o.getNode(2).value());
//		assertEquals("Cranckfergus", o.getNode(3).value());
//
//		assertEquals("Cranckfergus", o.last().value());
//		assertEquals("Accra", o.first().value());
//		assertEquals("Washington", o.getNode(1).next().value());
//		assertEquals("Nairobi", o.getNode(2).prev().value());
//
//	}
//	@Test
//	public void TestinsertAfter() {
//		DLList<String> p= new DLList<String>();
//		p.append("Queen Of The UnitedStates");
//		p.prepend("Duke Of Massachusetts");
//		p.append("Duchess Of NewYork");
//		p.prepend("Earl Of Ithaca");
//		assertEquals(4, p.size());
//
//		p.insertAfter("Marquess of Cornell", p.getNode(1));
//		assertEquals(5, p.size());
//
//		assertEquals("Earl Of Ithaca", p.getNode(0).value());
//		assertEquals("Duke Of Massachusetts", p.getNode(1).value());
//		assertEquals("Marquess of Cornell", p.getNode(2).value());
//		assertEquals("Queen Of The UnitedStates", p.getNode(3).value());
//		assertEquals("Duchess Of NewYork", p.getNode(4).value());
//
//		assertEquals("Duchess Of NewYork", p.last().value());
//		assertEquals("Earl Of Ithaca", p.first().value());
//		assertEquals("Marquess of Cornell", p.getNode(3).prev().value());
//		assertEquals("Marquess of Cornell", p.getNode(1).next().value());
//
//
//	}
//}
//
