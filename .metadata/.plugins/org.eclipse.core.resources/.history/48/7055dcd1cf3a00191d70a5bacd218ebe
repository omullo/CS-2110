package LinkedList;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Test;

class DListTest {
	@Test
	public void testConstructor() {
		DList<Integer> b = new DList<Integere>();
		assertEquals("[]", b.toString());
		assertEquals("[]", b.toStringR());
		assertEquals(0, b.size());
	}

	@Test
	public void testPrepend() {
		DList<String> l = new DList<>();
		l.prepend("Sampson");
		assertEquals("[Sampson]", l.toString());
		assertEquals("[Sampson]", l.toStringR());
		assertEquals(1, l.size());

		l.prepend("EquityBank");
		assertEquals("Sampson", l.last());
		assertEquals("EquityBank", l.first());
		assertEquals("[EquityBank, Sampson]", l.toString());
		assertEquals("[Sampson, EquityBank]", l.toStringR());
		assertEquals(2, l.size());

	}

	@Test
	public void testAppend() {
		DList<String> m = new DList<>();
//		m.append("Sampson");
//		assertEquals("[Sampson]", m.toString());
//		assertEquals("[Sampson]", m.toStringR());
//		assertEquals(1, m.size());
//
//		m.append("EquityBank");

		m.prepend("Sampson");
		m.prepend("Dan");
		m.append("Judi");
		assertEquals("[Sampson, Dan, Judi]", m.toString());
		assertEquals(3, m.size());
		// assertEquals("EquityBank", m.last());

	}

	@Test
	public void testGetNode() {
		DList<String> n = new DList<>();
		n.append("Mumbai");
		n.prepend("Nairobi");
		n.append("Washington");
		n.prepend("Accra");
		n.append("Cranckfergus");
		assertEquals(5, n.size());
		assertEquals("Accra", n.getNode(0).value());
		assertEquals("Nairobi", n.getNode(1).value());
		assertEquals("Mumbai", n.getNode(2).value());
		assertEquals("Washington", n.getNode(3).value());

		assertThrows(AssertionError.class, () -> {
			n.getNode(-5);
		});
	}

	@Test
	public void testDeleteNode() {
		DList<String> b = new DList<>();
//		b.append("Mumbai");
//		b.delete(b.getNode(0));
//		assertEquals(0, b.size());

		b.append("Mumbai");
		b.prepend("Nairobi");
		b.append("Washington");
		b.prepend("Accra");
		b.append("Cranckfergus");
		assertEquals(5, b.size());
		assertEquals("Mumbai", b.getNode(2).value());

		b.delete(b.getNode(2));
		assertEquals(4, b.size());

	}

	@Test
	public void TestinsertAfter() {
		DList<String> c = new DList<>();
		c.append("Mumbai");
		c.prepend("Nairobi");
		c.append("Washington");
		c.prepend("Accra");
		c.append("Cranckfergus");
		assertEquals(5, c.size());

		c.insertBefore("Kigali", c.getNode(1));
		assertEquals(6, c.size());
		c.insertBefore("Nairobi", c.getNode(0));
		assertEquals(6, c.size());

	}

}

